# –ë–æ—Ç –±—É–¥–µ—Ç –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø–æ–º–æ—à–Ω–∏–∫–æ–º –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
# –í –ø–ª–∞–Ω–∞—Ö:
# –ü—Ä–∏ –≤—ã–≤–æ–¥–µ —Ç–æ–ø 10 –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –∏ ,–µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ —ç—Ç–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –≤ —Å—Å—ã–ª–∫–µ
# –ø–æ–¥ —ç—Ç–∏–º –≥–æ—Ä–æ–¥–æ–º –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç

import telebot
import random
from telebot import types
from cities import variants, top10
from API import bot_tg_API
from Aviasales import first_step

bot: telebot.TeleBot = telebot.TeleBot(bot_tg_API)

for_button_dict = {}


# –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–≤–æ–¥ –∏–Ω—Ñ—ã
@bot.message_handler(commands=['inf'])
def main(message):
    bot.send_message(message.chat.id, message)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ START
@bot.message_handler(commands=['start'])
def start(message: types.Message):
    if message.from_user.last_name is not None and message.from_user.first_name is not None:
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} {message.from_user.last_name}! \n–ß—Ç–æ–±—ã"
                         f"–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä –≥–æ—Ä–æ–¥–∞, –Ω–∞–∂–º–∏—Ç–µ '‚Üí' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n /choose –∏–∑ —Å–ø–∏—Å–∫–∞ '–ú–µ–Ω—é'",
                         reply_markup=next_button())
    elif message.from_user.last_name is None and message.from_user.first_name is not None:
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {message.from_user.first_name}! \n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä –≥–æ—Ä–æ–¥–∞, "
                         f"–Ω–∞–∂–º–∏—Ç–µ '‚Üí' –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \n /choose –∏–∑ —Å–ø–∏—Å–∫–∞ '–ú–µ–Ω—é'",
                         reply_markup=next_button())


def next_button() -> types.InlineKeyboardMarkup:
    markup = types.InlineKeyboardMarkup(row_width=1)
    next_start_choose = types.InlineKeyboardButton('‚Üí', callback_data='next_start_choose')
    markup.add(next_start_choose)
    return markup


# # --------------------------------------------------------------------------------------------------------------------
def start_choose(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    rand_route = types.InlineKeyboardButton('–°–ª—É—á–∞–π–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç', callback_data='rand_route')
    top10m = types.InlineKeyboardButton('–¢–æ–ø 10 –º–∞—Ä—à—Ä—É—Ç–æ–≤', callback_data='top10m')
    next1 = types.InlineKeyboardButton('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–¥–±–æ—Ä –º–∞—Ä—à—Ä—É—Ç–∞', callback_data='next1')
    markup.add(rand_route, top10m, next1)
    # –¢–µ–∫—Å—Ç, –≤—ã–≤–æ–¥–∏–º—ã–π –Ω–∞–¥ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_message(message.chat.id, "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ - –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!üôÇ\n"
                                      "–û–Ω –±—É–¥–µ—Ç –¥–ª—è –≤–∞—Å –Ω–µ–∑–∞–º–µ–Ω–∏–º—ã–º –ø—É—Ç–µ–≤–æ–¥–∏—Ç–µ–ª–µ–º –≤ –ª—é–±–æ–π —Ç–æ—á–∫–µ –†–æ—Å—Å–∏–∏. "
                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å —Å–∞–º–∏!", reply_markup=markup)


# ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì

# –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏–∏ –∫–Ω–æ–ø–∫–∏ "CHOOSE"
@bot.message_handler(commands=['choose'])
def button(message):  # –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–≤—è–∑–∫–∏ —Å –ü–†–û–î–û–õ–ñ–ò–¢–¨ –ü–û–î–ë–û–† –ú–ê–†–®–†–£–¢–ê
    start_choose(message)


# –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É —Å –∫–æ–Ω–æ–ø–∫ –≤ choose
@bot.callback_query_handler(func=lambda call: True)
def callback(call: types.CallbackQuery):
    print(call.data)
    if call.data == 'rand_route':  # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏
        markup = types.InlineKeyboardMarkup(row_width=1)
        next1 = types.InlineKeyboardButton('‚Üí', callback_data='next1')
        markup.add(next1)
        bot.send_message(call.message.chat.id, random.choice(variants))
        bot.send_message(call.message.chat.id, "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚Üí'", reply_markup=markup)

    elif call.data == 'top10m':  # —Ç–æ–ø 10 –≥–æ—Ä–æ–¥–æ–≤
        markup = types.InlineKeyboardMarkup(row_width=1)
        next1 = types.InlineKeyboardButton('‚Üí', callback_data='next1')
        markup.add(next1)
        bot.send_message(call.message.chat.id, top10)
        bot.send_message(call.message.chat.id, "–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚Üí'", reply_markup=markup)

    elif call.data == 'next_start_choose':  # —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–≤—è–∑–∫–∏
        for_button_dict[call.message.chat.id] = {}
        start_choose(call.message)

    elif call.data == 'next1':
        markup = types.InlineKeyboardMarkup()
        k1 = types.InlineKeyboardButton(text='–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π:\n–∏—é–ª—å:+22, —è–Ω–≤–∞—Ä—å:+6', callback_data='–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π')
        k2 = types.InlineKeyboardButton('–ú—É—Å—Å–æ–Ω–Ω—ã–π:\n–∏—é–ª—å:+16, —è–Ω–≤–∞—Ä—å:-16', callback_data='–ú—É—Å–æ–Ω–Ω—ã–π')
        k3 = types.InlineKeyboardButton('–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π:\n–∏—é–ª—å:+18, —è–Ω–≤–∞—Ä—å:-40',
                                        callback_data='–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π')
        k4 = types.InlineKeyboardButton('–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π:\n–∏—é–ª—å:+18, —è–Ω–≤–∞—Ä—å:-20', callback_data='–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π')
        k5 = types.InlineKeyboardButton('–£–º–µ—Ä–µ–Ω–Ω–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π:\n–∏—é–ª—å:+18, —è–Ω–≤–∞—Ä—å:-10',
                                        callback_data='–£–º–µ—Ä–µ–Ω–Ω–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π')
        k6 = types.InlineKeyboardButton('–°—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π:\n–∏—é–ª—å:+12, —è–Ω–≤–∞—Ä—å:-32', callback_data='–°—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π')
        k7 = types.InlineKeyboardButton('–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π:\n–∏—é–ª—å:+6, —è–Ω–≤–∞—Ä—å:-28', callback_data='–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π')
        next2 = types.InlineKeyboardButton('‚Üí', callback_data='–∫–ª–∏–º–∞—Ç')
        back1 = types.InlineKeyboardButton('‚Üê', callback_data='back1')
        markup.add(k1)
        markup.add(k2)
        markup.add(k3)
        markup.add(k4)
        markup.add(k5)
        markup.add(k6)
        markup.add(k7)
        markup.add(back1, next2)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text='–£–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω', reply_markup=markup)
    elif call.data == 'back1':
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
        # bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, reply_markup=button(message=call.message))
        start_choose(call.message)

        # bot.send_message(call.message.chat.id, text='–ú—É—Å–æ–Ω–Ω—ã–π', reply_markup=time_buttons(['+6', '+7', '+8']))
        # bot.send_message(call.message.chat.id, text='–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π', reply_markup=time_buttons(['+2', '+4', '+3']))

    # –Ω–∞–¥–æ —á—Ç–æ–± –Ω–æ–≤–æ–æ–±—Ä–∞–∑–æ–≤–∞–≤—à–∞—è—Å—è –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–ª–∞ –ø—Ä—è–º–∏–∫–æ–º –≤
    elif call.data == '–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π':
        # bot.send_message(call.message.chat.id, text='–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π', reply_markup=time_buttons(['+1', '+2', '+3']))
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['0', '+1']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π'
        # bot.message_handler()

    elif call.data == '–ú—É—Å–æ–Ω–Ω—ã–π':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['+7', '+8', '+9']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–ú—É—Å–æ–Ω–Ω—ã–π'

    elif call.data == '–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['+4', '+5', '+6']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π'

    elif call.data == '–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['+2', '+3']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π'

    elif call.data == '–£–º–µ—Ä–µ–Ω–Ω–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['-1', '0', '+1', '+2']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–£–º–µ—Ä–µ–Ω–Ω–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π'

    elif call.data == '–°—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['0', '+2', '+4', '+6', '+8', '+9']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–°—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π'

    elif call.data == '–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next2')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=time_buttons(['+4', '+6', '+7', '+8', '+9']))
        for_button_dict[call.message.chat.id]['–∫–ª–∏–º–∞—Ç'] = '–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π'
        print(for_button_dict)

    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    elif call.data == 'next2':  # 'inline_markup':
        markup = types.InlineKeyboardMarkup(row_width=3)
        t1 = types.InlineKeyboardButton('-1 –æ—Ç –ú–°–ö', callback_data='-1')
        t2 = types.InlineKeyboardButton('0 –æ—Ç –ú–°–ö', callback_data='0')
        t3 = types.InlineKeyboardButton('+1 –∫ –ú–°–ö', callback_data='+1')
        t4 = types.InlineKeyboardButton('+2 –∫ –ú–°–ö', callback_data='+2')
        t5 = types.InlineKeyboardButton('+3 –∫ –ú–°–ö', callback_data='+3')
        t6 = types.InlineKeyboardButton('+4 –∫ –ú–°–ö', callback_data='+4')
        t7 = types.InlineKeyboardButton('+5 –∫ –ú–°–ö', callback_data='+5')
        t8 = types.InlineKeyboardButton('+6 –∫ –ú–°–ö', callback_data='+6')
        t9 = types.InlineKeyboardButton('+7 –∫ –ú–°–ö', callback_data='+7')
        t10 = types.InlineKeyboardButton('+8 –∫ –ú–°–ö', callback_data='+8')
        t11 = types.InlineKeyboardButton('+9 –∫ –ú–°–ö', callback_data='+9')
        next3 = types.InlineKeyboardButton('‚Üí', callback_data='next3')
        back = types.InlineKeyboardButton('‚Üê', callback_data='next1')
        markup.add(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, next3, back)
        bot.edit_message_text(chat_id=call.message.chat.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:',
                              message_id=call.message.message_id, reply_markup=markup)
        # bot.edit_message_text(call.message.chat.id, call.message.id, reply_markup=None)

    elif call.data == '-1':
        inline_markup1 = types.InlineKeyboardMarkup()
        item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next3')
        back = types.InlineKeyboardButton(text='‚Üê', callback_data='next2')
        inline_markup1.add(back, item_alone)
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=inline_markup1)
        # bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
        #                       reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '-1'
        print(for_button_dict)

    elif call.data == '0':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '0'

    elif call.data == '+1':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+1'

    elif call.data == '+2':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+2'
        print(for_button_dict)

    elif call.data == '+3':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+3'

    elif call.data == '+4':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+4'

    elif call.data == '+5':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+5'

    elif call.data == '+6':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+6'

    elif call.data == '+7':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+7'

    elif call.data == '+8':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+8'

    elif call.data == '+9':
        bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
                              reply_markup=for_time(call))
        for_button_dict[call.message.chat.id]['–≤—Ä–µ–º—è'] = '+9'

    # elif call.data == '-1':
    #     inline_markup = types.InlineKeyboardMarkup()
    #     item_alone = types.InlineKeyboardButton(text=call.data, callback_data=call.data)
    #     inline_markup.add(item_alone)
    #     bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
    #                           reply_markup=inline_markup)

    # elif call.data == 'next3':
    #     markup = types.InlineKeyboardMarkup(row_width=2)
    #     c1 = types.InlineKeyboardButton('–¥–æ 3000—Ä.', callback_data='—Å1')
    #     c2 = types.InlineKeyboardButton('–æ—Ç 3000—Ä. –¥–æ 5000—Ä.', callback_data='—Å2')
    #     c3 = types.InlineKeyboardButton('–æ—Ç 5000—Ä. –¥–æ 7000—Ä.', callback_data='—Å3')
    #     c4 = types.InlineKeyboardButton('–æ—Ç 7000 –¥–æ 10000—Ä.', callback_data='—Å4')
    #     c5 = types.InlineKeyboardButton('–æ—Ç 10000 –¥–æ 13000—Ä.', callback_data='—Å5')
    #     c6 = types.InlineKeyboardButton('–æ—Ç 13000 –¥–æ 16000—Ä.', callback_data='—Å6')
    #     c7 = types.InlineKeyboardButton('–æ—Ç 16000 –¥–æ 19000—Ä.', callback_data='—Å7')
    #     c8 = types.InlineKeyboardButton('–æ—Ç 19000 –¥–æ 24000—Ä.', callback_data='—Å8')
    #     next4 = types.InlineKeyboardButton('‚Üí', callback_data='next4')
    #     markup.add(c1, c2, c3, c4, c5, c6, c7, c8, next4)
    #
    #     bot.send_message(call.message.chat.id, '–ü–æ—Å–ª–µ–¥–Ω–∏–º —ç—Ç–∞–ø–æ–º –ø–æ–¥–±–æ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç –±—é–¥–∂–µ—Ç–∞:', reply_markup=markup)

    # elif call.data == 'c1':
    #     bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id)

    elif call.data == 'next3':
        p(call.message)

    elif call.data == 'next4':  # –ü–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å –º–µ—Å—Ç–æ–º –ø–æ–ª—ë—Ç–∞, –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥–µ—à–µ–≤–æ–≥–æ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –ø—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Ä–æ–¥–æ–≤/–º–∞—Ä—à—Ä—É—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
        first_step(call.message, bot)


def time_buttons(mas: list) -> types.InlineKeyboardMarkup:
    inline_markup: types.InlineKeyboardMarkup = types.InlineKeyboardMarkup()
    for x in mas:
        item = types.InlineKeyboardButton(text=x, callback_data=x)
        inline_markup.add(item)
    return inline_markup


from functools import lru_cache


@lru_cache(maxsize=1)
def buttons() -> types.InlineKeyboardMarkup:
    item = types.InlineKeyboardButton(text='a', callback_data='+1')
    markup = types.InlineKeyboardMarkup()
    markup.add(item)
    return markup


# @bot.message_handler(commands=['t'])
# def time(call):
#     time = ['-1', '0', '+1', '+2', '+3', '+4', '+5', '+6', '+7', '+8', '9']
#     for x in range(len(time)):
#         if call.data == '–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π':
#             markup = types.InlineKeyboardMarkup()
#             choose_time = types.InlineKeyboardButton(text = '0', callback_data= '0')
#             markup.add(choose_time)
#         if call.data == '–ú—É—Å–æ–Ω–Ω—ã–π':
#             markup = types.InlineKeyboardMarkup()
#             choose_time = types.InlineKeyboardButton(text='+8', callback_data='+8')
#             markup.add(choose_time)
#     bot.send_message(call.chat.id, 'fgbf')


def for_time(call):
    inline_markup1 = types.InlineKeyboardMarkup()
    item_alone = types.InlineKeyboardButton(text='‚Üí', callback_data='next3')
    back = types.InlineKeyboardButton(text='‚Üê', callback_data='next1')
    inline_markup1.add(back, item_alone)
    return inline_markup1


# @bot.message_handler(commands=['p'])
def p(message: types.Message):
    towns_sub0 = ['–°–æ—á–∏', '–¢—É–∞–ø—Å–µ', '–ê–Ω–∞–ø–∞', '–ì–µ–ª–µ–Ω–¥–∂–∏–∫', '–Ø–ª—Ç–∞', '–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫', '–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å', '–ú–∞–≥–∞—Å']
    towns_sub1 = ['–°–∞–º–∞—Ä–∞', '–ò–∂–µ–≤—Å–∫', 'fgdfgd', 'dvv']
    towns_mus9 = ['–ë–ª–∞–≥–æ–≤–µ—â–µ–Ω—Å–∫', '–¢—ã–Ω–¥–∞', '–ê—Ä—Ö–∞—Ä–∞', 'gvevw']
    towns_mus7 = ['–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫', '–•–∞–±–∞—Ä–æ–≤—Å–∫', '–ù–∏–∫–æ–ª–∞–µ–≤—Å–∫', '–ù–∞—Ö–æ–¥–∫–∞', '–£—Å—Å—É—Ä–∏–π—Å–∫']
    towns_mus8 = ['–Æ–∂–Ω–æ-–°–∞—Ö–∞–ª–∏–Ω—Å–∫', '–ö–æ–º—Å–æ–º–æ–ª—å—Å–∫-–Ω–∞-–ê–º—É—Ä–µ', '–ê–º—É—Ä—Å–∫', '–ù–∏–∂–Ω–µ—Ç–∞–º–±–æ–≤—Å–∫–æ–µ']
    towns_rezk2 = ['–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫', 'vev', 'ervwvw']
    towns_rezk3 = []
    towns_rezk4 = []
    towns_kont3 = []
    towns_kont4 = []
    towns_kont5 = []
    towns_ymkont = []
    towns_ymkont0 = []
    towns_ymkont1 = []
    towns_ymkont2 = []
    towns_subar0 = []
    towns_subar2 = []
    towns_subar4 = []
    towns_subar6 = []
    towns_subar8 = ['–ü–µ–≤–µ–∫', '–ê–Ω–∞–¥—ã—Ä—å', '–•–∞—Ç–∞–Ω–≥–∞', '–°—Ä–µ–¥–Ω–µ–∫–æ–ª—ã–º—Å–∫']
    towns_subar9 = ['–ú—É—Ä–º–∞–Ω—Å–∫', '–°–∞–ª–µ—Ö–∞—Ä–¥', '–ê–Ω–∞–¥—ã—Ä—å', '–ù–æ—Ä–∏–ª—å—Å–∫', '–ö–∏—Ä–æ–≤—Å–∫', '–Ø–∫—É—Ç—Å–∫', '–¢–æ–º—Å–∫', '–•–∞–Ω—Ç—ã-–ú–∞–Ω—Å–∏–π—Å–∫', '–ß–∏—Ç–∞']
    towns_arct4 = []
    towns_arct6 = []
    towns_arct7 = []
    towns_arct8 = []
    towns_arct9 = []
    dict_cities = {'–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π': {'0': towns_sub0, '+1': towns_sub1},
                   '–ú—É—Å–æ–Ω–Ω—ã–π': {'+9': towns_mus9, '+7': towns_mus7, '8': towns_mus8},
                   '–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π': {'+2': towns_rezk2, '+3': towns_rezk3, '+4': towns_rezk4},
                   '–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π': {'+3': towns_kont3, '+4': towns_kont4, '+5': towns_kont5},
                   '–£–º–µ—Ä–µ–Ω–Ω–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π': {'-1': towns_ymkont, '0': towns_ymkont0, '+1': towns_ymkont1,
                                                '+2': towns_ymkont2},
                   '–°—É–±–∞—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π': {'0': towns_subar0, '+2': towns_subar2, '+4': towns_subar4, '+6': towns_subar6,
                                      '+8': towns_subar8, '+9': towns_subar9},
                   '–ê—Ä–∫—Ç–∏—á–µ—Å–∫–∏–π': {'+4': towns_arct4, '+6': towns_arct6, '+7': towns_arct7, '+8': towns_arct8,
                                   '+9': towns_arct9}} #['+4', '+6', '+7', '+8', '+9']
    #dict_cities = {'–°—É–±—Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–π': {'-1': townssub, '0': townssub0, '+1': townssub1, '+2': townssub2}, '–ú—É—Å–æ–Ω–Ω—ã–π': {'+6': townsmus6, '+7': townsmus7, '+8': townsmus8}, '–†–µ–∑–∫–æ-–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç–∞–ª—å–Ω—ã–π': {'+2': , '+3': ,'+4': }}

    climate = for_button_dict[message.chat.id]['–∫–ª–∏–º–∞—Ç']
    time = for_button_dict[message.chat.id]['–≤—Ä–µ–º—è']
    cities = '–í–∞—à–∏ –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–±—ã—Ç–∏—è:'
    used_cities = []
    while len(used_cities) != 4:
        r = random.randint(0, len(dict_cities[climate][time]) - 1)
        if dict_cities[climate][time][r] in used_cities:
            pass
        else:
            used_cities.append(dict_cities[climate][time][r])
            cities += ('\n' + str(len(used_cities)) + '. ' + dict_cities[climate][time][r])
    item = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='next4')
    inline_markup = types.InlineKeyboardMarkup().add(item)
    #bot.send_message(chat_id=message.chat.id, text = cities, reply_markup=inline_markup)
    bot.edit_message_text(text=cities, message_id=message.message_id, chat_id=message.chat.id, reply_markup=inline_markup)


# def for_times(call):
#     inline_markup1 = types.InlineKeyboardMarkup()
#     item_alone = types.InlineKeyboardButton(text=call.data, callback_data='next4')
#     back = types.InlineKeyboardButton(text='‚Üê', callback_data='next2')
#     inline_markup1.add(back, item_alone)
#     bot.edit_message_text(text=call.message.text, message_id=call.message.message_id, chat_id=call.message.chat.id,
#                           reply_markup=inline_markup1)
#     return  inline_markup1


# –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏: (8**11 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤) —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ -> –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å 214 358 881
# –≥—Ä–æ–¥–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ–Ω —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç–∏ –≥–æ—Ä–æ–¥–∞)


# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Next, –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ —Ç–∏–ø—É: –∫–∞–∫–æ–π –∫–ª–∏–º–∞—Ç, –∑–æ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã, –±—é–¥–∂–µ—Ç
# –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ Next
# def on_click_Next(call):
#     if call.data == 'next1':
#         markup = types.InlineKeyboardMarkup(row_width=1)
#         # markup = types.InlineKeyboardMarkup(row_width=1)
#         climate = types.InlineKeyboardButton('–ü–æ–¥—Ö–æ–¥—è—â–∏–π –∫–ª–∏–º–∞—Ç', callback_data='climate')
#         zone = types.InlineKeyboardButton('–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –†–æ—Å—Å–∏–∏', callback_data='zone')
#         budget = types.InlineKeyboardButton('–ë—é–¥–∂–µ—Ç', callback_data='budget')
#         markup.add(climate, zone, budget)
#         bot.send_message(call.data.call.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=markup)


# ‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë‚Üë
if __name__ == '__main__':
    # while True:
    #     try:
    #         bot.polling(none_stop=True)
    #     except Exception as e:
    #         print(e)
    #         print('–ü–∏')
    bot.polling(none_stop=True)
